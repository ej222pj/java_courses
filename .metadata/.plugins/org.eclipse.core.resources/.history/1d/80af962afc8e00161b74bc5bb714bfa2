/**
 * @project_name 2DV600
 *
 * @package_name ej222pj
 * 
 * @file_name MyTransitiveClosure.java
 */
package ej222pj;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import graphs.DirectedGraph;
import graphs.Node;
import graphs.TransitiveClosure;

/**
 * @author Eric
 * @param <E>
 *
 * @date 27 sep. 2016 : @time 19:06:51
 *
 */
public class MyTransitiveClosure<E> implements TransitiveClosure<E>{

	/**
	 * Computes the transitive closure for the graph.
	 */
	@Override
	public Map<Node<E>, Collection<Node<E>>> computeClosure(DirectedGraph<E> dg) {
		Map<Node<E>, Collection<Node<E>>> computeClosure = new HashMap<>();
		MyDFS<E> myDFS = new MyDFS<E>();
		
		for(Iterator<Node<E>> iterator = dg.iterator(); iterator.hasNext();) {
			List<Node<E>> list =  myDFS.dfs(dg, iterator.next(););
			computeClosure.put(iterator.next();, list);
		}
		return computeClosure;
	}
}
