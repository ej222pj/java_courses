/**
 * @project_name 2DV600
 *
 * @package_name ej222pj_assign2.exercise_4
 * 
 * @file_name GenericQueueTest.java
 */
package ej222pj_assign2.exercise_4;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * @author Eric
 *
 * @date 19 sep 2016 : @time 19:16:29
 *
 */
public class GenericQueueTest {

	/**
	 * Enqueue a lot of nodes, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#enqueue(java.lang.Object)}.
	 */
	@Test
	public void testEnqueueTwoHundredThousandNodes() {
		int numberOfNodes = 200000;
	    Queue<Integer> queue = build(numberOfNodes);
	    
	    assertEquals(numberOfNodes, queue.size());
	}
	
	/**
	 * Enqueue small number of nodes, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#enqueue(java.lang.Object)}.
	 */
	@Test
	public void testEnqueueFiveNodes() {
		int numberOfNodes = 5;
	    Queue<Integer> queue = build(numberOfNodes);
	    
	    assertEquals(numberOfNodes, queue.size());
	}
	
	/**
	 * Big size test method for {@link ej222pj_assign2.exercise_4.GenericQueue#size()}.
	 */
	@Test
	public void testSizeWithFiftyThousandNodes() {
		int numberOfNodes = 50000;
	    Queue<Integer> queue = build(numberOfNodes);

	    assertEquals(numberOfNodes, queue.size());
	}
	
	/**
	 * Empty test method for {@link ej222pj_assign2.exercise_4.GenericQueue#size()}.
	 */
	@Test
	public void testSizeWithEmptyQueue() {
	    Queue<Integer> queue = new GenericQueue<>();

	    assertEquals(0, queue.size());
	}


	/**
	 * Empty test method for {@link ej222pj_assign2.exercise_4.GenericQueue#isEmpty()}.
	 */
	@Test
	public void testIsEmptyOnEmptyQueue() {
		 Queue<Integer> queue = new GenericQueue<>();

	    assertTrue(queue.isEmpty());
	}
	
	/**
	 * Not empty test method for {@link ej222pj_assign2.exercise_4.GenericQueue#isEmpty()}.
	 */
	@Test
	public void testIsEmptyOnNotEmptyQueue() {
		 Queue<Integer> queue = build(1);

	    assertFalse(queue.isEmpty());
	}

	/**
	 * Dequeue with ten nodes to get value, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#dequeue()}.
	 */
	@Test
	public void testDequeueValueWithTenNodesToGetValue() {
	    int numberOfNodes = 10;
	    Queue<Integer> queue = build(numberOfNodes);
	    //int expectedSize = numberOfNodes - 1;
	    //int expectedElement = 1; // first element is 1
	    
	    int dequeuedNodeValue = queue.dequeue();
	    //int actualSize = queue.size();
	    
	    assertEquals(1, dequeuedNodeValue);
	}
	
	/**
	 * Dequeue with ten nodes to get size, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#dequeue()}.
	 */
	@Test
	public void testDequeueValueWithTenNodesToGetSize() {
	    int numberOfNodes = 10;
	    Queue<Integer> queue = build(numberOfNodes);
	    
	    queue.dequeue();
	    
	    assertEquals(numberOfNodes - 1, queue.size());
	}
	
	/**
	 * Dequeue with empty queue, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#dequeue()}.
	 */
	@Test(expected=IndexOutOfBoundsException.class)
	public void testDequeueWithEmptyQueue() {
	    Queue<Integer> queue = new GenericQueue<>();
	    
	    queue.dequeue();
	}

	/**
	 * Value of first node, test method for {@link ej222pj_assign2.exercise_4.GenericQueue#first()}.
	 */
	@Test
	public void testFirstValueOfNode() {
		int numberOfNodes = 10;
	    Queue<Integer> queue = build(numberOfNodes);
	    
	    int firstNodeValue = queue.first();
	    
	    assertEquals(1, firstNodeValue);
	}

	/**
	 * Test method for {@link ej222pj_assign2.exercise_4.GenericQueue#last()}.
	 */
	@Test
	public void testLast() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link ej222pj_assign2.exercise_4.GenericQueue#iterator()}.
	 */
	@Test
	public void testIterator() {
		fail("Not yet implemented");
	}
	
	private Queue<Integer> build(int size) {
	    Queue<Integer> queue = new GenericQueue<>();

	    for (int i = 0; i <= size; i++) {
	      queue.enqueue(i);
	    }

	    return queue;
	  }

}
