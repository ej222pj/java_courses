/**
 * @project_name 2DV600
 *
 * @package_name ej222pj_assign1
 * 
 * @file_name Fraction.java
 */
package ej222pj_assign1;

/**
 * @author Eric
 *
 * @date 6 sep 2016 : @time 18:31:53
 *
 */
public class Fraction {
    private int numerator;
    private int denominator;

    public Fraction(int n, int d) throws Exception {
        setNumerator(n);
        setDenominator(d);
        this.simplify();
    }
    
    public int getNumerator(){
        return this.numerator;
    }

    public int getDenominator(){
        return this.denominator;
    }

    public boolean isNegative(){
        return (((double)this.numerator / (double)this.denominator) < 0);
    }

    public Fraction add(Fraction fract2) throws Exception{
        int num = 0;
        int den = 0;
        try{
            num = ((fract2.numerator * this.denominator)) + (this.numerator * fract2.denominator);
            den = this.denominator * fract2.denominator;
        }
        catch(Exception e){
            System.out.println(e.getMessage());
        }
        
        return new Fraction(num, den);
    }

    public Fraction subtract(Fraction fract2) throws Exception{
        Fraction frac = new Fraction(((this.getNumerator()*fract2.getDenominator())-
                (fract2.getNumerator()*this.getDenominator())),
                (this.getDenominator()*fract2.getDenominator()));

        return frac;
    }

    public Fraction multiply(Fraction fract2) throws Exception {
        Fraction frac = new Fraction(((this.getNumerator()*1)*
                (1*this.getDenominator())),
                (this.getDenominator()*fract2.getDenominator()));

        return frac;
    }

    public Fraction divide(Fraction fract2) throws Exception{
        Fraction frac = new Fraction((this.getNumerator()* fract2.getDenominator()) , (this.getDenominator()*fract2.getNumerator()));

        return frac;
    }
    
    public boolean isEqualTo(Fraction fract2){
        return this.getDenominator() * fract2.getNumerator() == this.getNumerator() * fract2.getDenominator();
    }
    
    public String toString(){
        return "Fraction: " + this.getNumerator() + "/" + this.getDenominator();
    }

    public void simplify(){
        int num = this.getNumerator();
        int den = this.getDenominator();

        while(den != 0){
            int temp = den;
            den = num % den;
            num = temp;
        }
        int gcd = num;
        this.numerator /= gcd;
        this.denominator /= gcd;
    }

    private void setNumerator(int n){
        this.numerator = n;
    }

    private void setDenominator(int d) throws Exception {
        try{
            if(d == 0){
                throw new Exception("Denominator cannot be set to zero! Program will terminate.");
            }
            this.denominator = d;
        }
        catch (Exception e){
            System.out.println(e.getMessage());
            System.exit(0);
        }
    }
}