/**
 * @project_name 2DV600
 *
 * @package_name ej222pj
 * 
 * @file_name MyBFS.java
 */
package ej222pj;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import graphs.BFS;
import graphs.DirectedGraph;
import graphs.Node;

/**
 * @author Eric
 * @param <E>
 *
 * @date 27 sep. 2016 : @time 19:06:02
 *
 */
public class MyBFS<E> implements BFS<E>{

	private List<Node<E>> bfsRecursive(HashSet<Node<E>>set, HashSet<Node<E>> visited, List<Node<E>> list){
		
		Iterator<Node<E>> setIterator = set.iterator();
		set = new HashSet<>();
		
		while(setIterator.hasNext()){
			Node<E> node = setIterator.next();
			
			if(!visited.contains(node)){
				node.num = list.size() + 1;
				visited.add(node);
				list.add(node);
			}
			Iterator<Node<E>> successorIt = node.succsOf();			
			while(successorIt.hasNext()){
				Node<E> successor = successorIt.next();
				if(!visited.contains(successor)){
					set.add(successor);
				}
			}		
		}

		if(!set.isEmpty()){
			bfsRecursive(set, list,visited);
		}
		return list;
	}
	
	/**
     * Returns the nodes visited by a breadth-first search starting from
     * the given root node. Each visited node is also attached with 
     * a breadth-first number.
     */
	@Override
	public List<Node<E>> bfs(DirectedGraph<E> graph, Node<E> root) {
		HashSet<Node<E>> set = new HashSet<>();
		HashSet<Node<E>> visited = new HashSet<>();
		List<Node<E>> list = new ArrayList<Node<E>>();
		set.add(root);
		
		return bfsRecursive(set, list, visited);
	}

	/**
     * Returns the nodes visited by a breadth first search starting from
     * an arbitrary set of nodes. All nodes are visited. Each visited node is 
     * also attached with a breadth-first number.
     */  
	@Override
	public List<Node<E>> bfs(DirectedGraph<E> graph) {
		List<Node<E>> list = new ArrayList<Node<E>>();
		HashSet<Node<E>>  set;
		HashSet<Node<E>>  visited = new HashSet<>();
		Iterator<Node<E>> heads = graph.heads();
		
		if(graph.headCount() != 0){
			while(heads.hasNext()){
				set = new HashSet<>();
				set.add(heads.next());
				list = bfsRecursive(set, list,visited);
			}
		}
		else{
			set = new HashSet<>();
			set.add(graph.getNodeFor(graph.allItems().get(0)));
			list = bfsRecursive(set, list,visited);
		}

		return list;
	}
}
