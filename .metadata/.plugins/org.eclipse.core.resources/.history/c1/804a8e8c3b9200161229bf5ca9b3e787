MyDFS:
Iterates over nodes and successors
Time Complexity = O(2N + S) -> O(N + S) 
	
while (succ.hasNext()) { -> O(S)	
	dfsRecursive(nodeList, hashSetVisited, root); -> O(N) 
}

=======================

MyBFS:
Iterates over hashset containing edge nodes from previous nodes
Time Complexity = O(2N + S) -> O(N + S)

while (setIterator.hasNext()) { -> O(N)
	while (succIterator.hasNext()) { -> O(S)
	}
}		

if (isEmpty == false) { -> O(1)
	bfsRecursive(set, list,visited); -> O(N)
}

=======================

MyTransitiveClosure:
Do a DFS on each node.
Time Complexity = O(N(N+S)) -> O(N^2 + NS) 

for(Iterator<Node<E>> iterator = dg.iterator(); iterator.hasNext();) { -> O(N) 
	computeClosure.put(node, myDFS.dfs(dg, node)); -> O(N+S)
}

=======================

MyConnectedComponents:
DFS inside a loop, with adds that takes O(N)
Time Complexity = O(N(N+S + N(N(2N))) -> O(N^2 + NS + N^4)


for (Node<E> node : dg) { -> O(N)
	if (visitedHashSet.contains(node) == false) {

		Collection<Node<E>> nodeCol = myDFS.dfs(dg, node); -> O(N+S)
		for (Node<E> reachableNode : nodeCol) { -> O(N)
		}
	}

	for (Collection<Node<E>> collectionNode : connectedComponentsHashSet) { -> O(N)
		if (Collections.disjoint(collectionNode, component) == false) { -> O(N)
            component.clear(); -> O(N)
        }
	}
}