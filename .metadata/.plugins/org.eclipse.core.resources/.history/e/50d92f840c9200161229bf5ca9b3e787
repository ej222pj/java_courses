MyDFS:
Time Complexity = O(N+S) 
	
while (succ.hasNext()) { -> O(S)	
	dfsRecursive(nodeList, hashSetVisited, root); -> O(N) 
}
Iterates over nodes and successors

=======================

MyBFS:
Time Complexity = O(N+S)

while (setIterator.hasNext()) { -> O(N)
	while (succIterator.hasNext()) { -> O(S)
	}
}		

if (isEmpty == false) { -> O(1)
	bfsRecursive(set, list,visited); -> O(N)
}
Iterates over hashset containing edge nodes from previous nodes

=======================

MyTransitiveClosure:
Time Complexity = O(N^2+NS) 

for(Iterator<Node<E>> iterator = dg.iterator(); iterator.hasNext();) { -> O(N) 
	computeClosure.put(node, myDFS.dfs(dg, node)); -> O(N+S)
}
Do a DFS on each node.

MyConnectedComponents:
Time Complexity = O(N^2 + NS + N^4)


WHILE(nodeIterator.hasNext())){ ---> O(N) Loop
	collection = dfs(next) ---> O(N+S) Depth-first search
	
	FOREACH(node in collection){ ---> O(N) Nested Loop
	
		FOREACH(collection in allCollection){ O(N) --->Nestedx2 Loop
		
			IFSTATEMENT(CONNECTION){
				Set.AddAll() ---> (N)
				Set.AddAll() ---> (N)
			}
		}
	} 
}

IFSTATEMENT(!CONNECTION){
	Set.AddAll() ---> (N)
	Set.AddAll() ---> (N)
}

for (Node<E> node : dg) { -> O(N)
	Set<Node<E>> component  = new HashSet<>();
	if (visitedHashSet.contains(node) == false) {
		component.add(node); -> O(N)

		Collection<Node<E>> reachable = myDFS.dfs(dg, node); -> O(N+S)
		for (Node<E> reachableNode : reachable) { -> O(N)
			component.add(reachableNode); -> O(N)
		}
	}

	for (Collection<Node<E>> collectionNode : connectedComponentsHashSet) { -> O(N)
		if (Collections.disjoint(collectionNode, component) == false) {
			collectionNode.addAll(component); -> O(N)
			component.clear(); -> O(N)
		}
	}
}

Since the first while-loop has 2 nested loops and a Depth-fist Search the time complexity should be O(N(N+S + N(N)).
Since the ifstatement can only happen one time in an iteration i add
2N to the time complexity and not 4N -> O(N(N+S + N(N(2N))).

If the time complexity is simplified it would look like this:
O(N(N+S + N(N(2N))) ---> N(N+S + N^2*N) ---> O(N^2 + NS + (N * N^3)) --> (N^2 + NS + N^4)