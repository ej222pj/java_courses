/**
 * @project_name 2DV600
 *
 * @package_name ej222pj
 * 
 * @file_name MyDFS.java
 */
package ej222pj;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import graphs.DFS;
import graphs.DirectedGraph;
import graphs.Node;

/**
 * @author Eric
 * @param <E>
 *
 * @date 27 sep. 2016 : @time 19:05:01
 *
 */
public class MyDFS<E> implements DFS<E>{

	@Override
	public List<Node<E>> dfs(DirectedGraph<E> graph, Node<E> root) {
		List<Node<E>> nodeList = new ArrayList<Node<E>>();
		
		root = graph.getNodeFor(root.item());
		
		return dfsRecursive(nodeList, root);
	}
	
	private List<Node<E>> dfsRecursive(List<Node<E>> nodeList, Node<E> node){
		Iterator<Node<E>> successors = node.succsOf();
	
		node.num = nodeList.size();
		nodeList.add(node);
		
		while(successors.hasNext()){
			Node<E> next = successors.next();
			if(!nodeList.contains(next)){
				dfsRecursive(nodeList,next);
			}
		}
		return nodeList;
	}

	@Override
	public List<Node<E>> dfs(DirectedGraph<E> graph) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g, Node<E> root) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g, boolean attach_dfs_number) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isCyclic(DirectedGraph<E> graph) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Node<E>> topSort(DirectedGraph<E> graph) {
		// TODO Auto-generated method stub
		return null;
	}

}
