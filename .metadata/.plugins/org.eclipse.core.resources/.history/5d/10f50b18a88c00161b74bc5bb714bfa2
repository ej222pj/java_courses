/**
 * @project_name 2DV600
 *
 * @package_name ej222pj
 * 
 * @file_name MyDFS.java
 */
package ej222pj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import graphs.DFS;
import graphs.DirectedGraph;
import graphs.Node;

/**
 * @author Eric
 * @param <E>
 *
 * @date 27 sep. 2016 : @time 19:05:01
 *
 */
public class MyDFS<E> implements DFS<E> {
	
	private List<Node<E>> dfsRecursive(List<Node<E>> nodeList, HashSet<Node<E>> hashSetVisited, Node<E> node){
		Iterator<Node<E>> succ = node.succsOf();
	
		node.num = nodeList.size();
		hashSetVisited.add(node);
		nodeList.add(node);
		
		while(succ.hasNext()) {
			Node<E> next = succ.next();
			
			if(hashSetVisited.contains(next) == false) {
				dfsRecursive(nodeList, hashSetVisited, next);
			}
		}
		return nodeList;
	}

	/**
     * Returns the nodes visited by a depth first search starting from
     * the given root node. Each visited node is also attached with 
     * a depth-first number.
     */ 
	@Override
	public List<Node<E>> dfs(DirectedGraph<E> graph, Node<E> root) {
		HashSet<Node<E>> hashSetVisited = new HashSet<>();
		List<Node<E>> nodeList = new ArrayList<Node<E>>();
		
		root = graph.getNodeFor(root.item());

		return dfsRecursive(nodeList, hashSetVisited, root);
	}

	/**
     * Returns the nodes visited by a depth first search starting from
     * an arbitrary set of nodes. All nodes are visited. Each visited node is 
     * also attached with a depth-first number.
     */ 
	@Override
	public List<Node<E>> dfs(DirectedGraph<E> graph) {
		HashSet<Node<E>> hashSetVisited = new HashSet<>();
		List<Node<E>> nodeList = new ArrayList<Node<E>>();
		Iterator<Node<E>> heads = graph.heads();
		
		if(graph.headCount() == 0) {
			nodeList = dfsRecursive(nodeList, hashSetVisited, graph.getNodeFor(graph.allItems().get(0)));
		}
		else if (graph.headCount() != 0) {
			while(heads.hasNext()){
				nodeList = dfsRecursive(nodeList, hashSetVisited, heads.next());
			}
		}
		return nodeList;
	}
	
	private List<Node<E>> postOrderRecursive(List<Node<E>> postOrderList, HashSet<Node<E>> hashSetVisited, Node<E> rootNode){
		if(hashSetVisited.contains(rootNode) == false) {
			Iterator<Node<E>> succ = rootNode.succsOf();
			hashSetVisited.add(rootNode);
			
			while(succ.hasNext()) {
				Node<E> next = succ.next();
				if(postOrderList.contains(next) == false) {
					postOrderRecursive(postOrderList, hashSetVisited, next);
				}	
			}
			rootNode.num = postOrderList.size() + 1;
			postOrderList.add(rootNode);
		}
		return postOrderList;
	}

	/**
     * Returns a list of nodes ordered as 
     * post-order of the depth first tree resulting from a
     * depth first search starting at the given root node. 
     * Notice, it only visits nodes reachable from given 
     * root node.
     * </p>
     * The algorithm also attaches a post-order number
     * to each visited node.
     */ 
	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g, Node<E> rootNode) {
		HashSet<Node<E>> hashSetVisited = new HashSet<Node<E>>();
		ArrayList<Node<E>> postOrderList = new ArrayList<>();
		
		rootNode = g.getNodeFor(rootNode.item());
		
		return postOrderRecursive(postOrderList, hashSetVisited, rootNode);
	}

	/**
     * Returns a list of ALL nodes in the graph ordered as 
     * post-order of the depth first forest resulting from
     * depth first search starting at arbitrary start nodes.
     * </p>
     * The algorithm also attaches a post-order number
     * to each visited node. 
     */ 
	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g) {
		HashSet<Node<E>> hashSetVisited = new HashSet<Node<E>>();
		List<Node<E>> postOrderList = new ArrayList<>();
		Iterator<Node<E>> heads = g.heads();
		
		if(g.headCount() == 0) {
			postOrderList = postOrderRecursive(postOrderList, hashSetVisited, g.getNodeFor(g.allItems().get(0)));
		}
		else if (g.headCount() != 0) {
			while(heads.hasNext()) {
				postOrderList = postOrderRecursive(postOrderList, hashSetVisited, heads.next());
			}
		}
		return postOrderList;
	}

	/**
     * Returns a list of ALL nodes in the graph ordered as 
     * post-order of the depth first forest resulting from
     * depth first search starting at arbitrary start nodes.
     * </p>
     * The algorithm attaches a depth-first number if <tt>attach_dfs_number</tt> 
     * is <tt>true</tt>, otherwise it attaches a post-order number. 
     */ 
	@Override
	public List<Node<E>> postOrder(DirectedGraph<E> g, boolean attach_dfs_number) {
		// No need to implement - Source: Johan HagelBack
		return null;
	}

	/**
     * Returns <tt>true</tt> if the graph contains one or more cycles, 
     * otherwise <tt>false</tt>
     */
	@Override
	public boolean isCyclic(DirectedGraph<E> graph) {
		Iterator<Node<E>> nodeIterator = graph.iterator();
		
		while(nodeIterator.hasNext()) {
			Node<E> node = nodeIterator.next();
			Iterator<Node<E>> tempNodeIterator = node.succsOf();
			
			while(tempNodeIterator.hasNext()) {
				if(tempNodeIterator.next().hasSucc(node)) return true;
			}
		}
		return false;
	}

	/**
     * Returns a list of all nodes in the graph ordered topological.
     * The algorithm assumes that the graph is acyclic. The result for
     * graphs with cycles are undefined. 
     */
	@Override
	public List<Node<E>> topSort(DirectedGraph<E> graph) {
		if(isCyclic(graph) == false) {
			@SuppressWarnings("unchecked")
			Node<E>[] topSortNodeArray = new Node[graph.nodeCount()];
		
			for(Node<E> node : postOrder(graph)){
				topSortNodeArray[graph.nodeCount() - (node.num) ] = node;
			}

			return Arrays.asList(topSortNodeArray);
		}
		else {
			throw new RuntimeException("Graph is not acyclic!");
		}
	}

}
